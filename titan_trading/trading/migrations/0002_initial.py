# Generated by Django 5.0 on 2025-03-20 00:54

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("trading", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AggregatedPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time_bucket",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Start of the time bucket for this aggregation",
                    ),
                ),
                (
                    "timeframe",
                    models.CharField(
                        help_text="Aggregation period (e.g., '1h', '1d', '1w')",
                        max_length=20,
                    ),
                ),
                (
                    "open",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Opening price in the period",
                        max_digits=19,
                    ),
                ),
                (
                    "high",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Highest price during the period",
                        max_digits=19,
                    ),
                ),
                (
                    "low",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Lowest price during the period",
                        max_digits=19,
                    ),
                ),
                (
                    "close",
                    models.DecimalField(
                        decimal_places=6, help_text="Closing price", max_digits=19
                    ),
                ),
                (
                    "volume",
                    models.BigIntegerField(help_text="Total volume during the period"),
                ),
                (
                    "vwap",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Volume-weighted average price",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        help_text="Number of data points in this bucket"
                    ),
                ),
            ],
            options={
                "ordering": ["time_bucket"],
            },
        ),
        migrations.CreateModel(
            name="BacktestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_return",
                    models.FloatField(help_text="Total return percentage"),
                ),
                (
                    "annualized_return",
                    models.FloatField(help_text="Annualized return percentage"),
                ),
                (
                    "sharpe_ratio",
                    models.FloatField(help_text="Sharpe ratio (risk-adjusted return)"),
                ),
                (
                    "sortino_ratio",
                    models.FloatField(
                        blank=True,
                        help_text="Sortino ratio (downside risk-adjusted return)",
                        null=True,
                    ),
                ),
                (
                    "max_drawdown",
                    models.FloatField(help_text="Maximum drawdown percentage"),
                ),
                (
                    "win_rate",
                    models.FloatField(help_text="Percentage of winning trades"),
                ),
                (
                    "profit_factor",
                    models.FloatField(
                        help_text="Ratio of gross profits to gross losses"
                    ),
                ),
                (
                    "trade_count",
                    models.IntegerField(help_text="Total number of trades"),
                ),
                (
                    "avg_holding_period",
                    models.FloatField(
                        blank=True,
                        help_text="Average holding period in days",
                        null=True,
                    ),
                ),
                (
                    "detailed_metrics",
                    models.JSONField(help_text="Detailed performance metrics"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "equity_curve",
                    models.JSONField(
                        blank=True, help_text="Equity curve data points", null=True
                    ),
                ),
                (
                    "monthly_returns",
                    models.JSONField(
                        blank=True, help_text="Monthly return breakdown", null=True
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BacktestRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this backtest run", max_length=255
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Start date for backtest period"),
                ),
                (
                    "end_date",
                    models.DateTimeField(help_text="End date for backtest period"),
                ),
                (
                    "parameters",
                    models.JSONField(
                        help_text="Strategy parameters used for this backtest"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        help_text="Current status of this backtest",
                        max_length=10,
                    ),
                ),
                (
                    "status_message",
                    models.TextField(
                        blank=True,
                        help_text="Status message or error details",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this backtest run"
                    ),
                ),
                (
                    "regime_aware",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this backtest uses regime-aware parameters",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BacktestTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "trade_type",
                    models.CharField(
                        choices=[("LONG", "Long"), ("SHORT", "Short")],
                        help_text="Type of trade (long or short)",
                        max_length=5,
                    ),
                ),
                ("entry_date", models.DateTimeField(help_text="Entry date and time")),
                (
                    "exit_date",
                    models.DateTimeField(
                        blank=True, help_text="Exit date and time", null=True
                    ),
                ),
                ("entry_price", models.FloatField(help_text="Entry price")),
                (
                    "exit_price",
                    models.FloatField(blank=True, help_text="Exit price", null=True),
                ),
                (
                    "position_size",
                    models.FloatField(
                        help_text="Position size as percentage of portfolio"
                    ),
                ),
                (
                    "pnl",
                    models.FloatField(
                        blank=True, help_text="Profit/loss in currency units", null=True
                    ),
                ),
                (
                    "pnl_percent",
                    models.FloatField(
                        blank=True, help_text="Profit/loss as percentage", null=True
                    ),
                ),
                (
                    "exit_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("TARGET", "Price Target"),
                            ("STOP", "Stop Loss"),
                            ("SIGNAL", "Signal"),
                            ("TIMEOUT", "Time Limit"),
                        ],
                        help_text="Reason for exiting the trade",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes about this trade"),
                ),
            ],
            options={
                "ordering": ["-entry_date"],
            },
        ),
        migrations.CreateModel(
            name="MarketRegime",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Start date of the regime period"),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="End date of the regime period (null if current)",
                        null=True,
                    ),
                ),
                (
                    "regime_type",
                    models.CharField(
                        choices=[
                            ("CRISIS", "Crisis"),
                            ("STABLE", "Stable"),
                            ("BULL", "Bull"),
                            ("BEAR", "Bear"),
                            ("VOLATILE", "Volatile"),
                            ("SIDEWAYS", "Sideways"),
                            ("RECOVERY", "Recovery"),
                        ],
                        help_text="Type of market regime",
                        max_length=15,
                    ),
                ),
                (
                    "vix_average",
                    models.FloatField(help_text="Average VIX value during this regime"),
                ),
                (
                    "volatility_score",
                    models.FloatField(help_text="Volatility score for this regime"),
                ),
                (
                    "macro_score",
                    models.FloatField(help_text="Macroeconomic conditions score"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this market regime"
                    ),
                ),
                (
                    "key_events",
                    models.JSONField(
                        default=list,
                        help_text="List of key market events during this regime",
                    ),
                ),
                (
                    "data_summary",
                    models.JSONField(
                        default=dict, help_text="Summary statistics for this regime"
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="PairSpread",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="Timestamp for this spread value"),
                ),
                ("spread_value", models.FloatField(help_text="Raw spread value")),
                ("z_score", models.FloatField(help_text="Z-score of the spread")),
                (
                    "mean",
                    models.FloatField(help_text="Rolling mean used for normalization"),
                ),
                (
                    "std_dev",
                    models.FloatField(
                        help_text="Rolling standard deviation used for normalization"
                    ),
                ),
                (
                    "lookback_window",
                    models.IntegerField(
                        default=20, help_text="Window size for rolling statistics"
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Price",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True, help_text="Timestamp for this price point"
                    ),
                ),
                (
                    "open",
                    models.DecimalField(
                        decimal_places=6, help_text="Opening price", max_digits=19
                    ),
                ),
                (
                    "high",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Highest price during the period",
                        max_digits=19,
                    ),
                ),
                (
                    "low",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Lowest price during the period",
                        max_digits=19,
                    ),
                ),
                (
                    "close",
                    models.DecimalField(
                        decimal_places=6, help_text="Closing price", max_digits=19
                    ),
                ),
                (
                    "volume",
                    models.BigIntegerField(
                        help_text="Trading volume during the period"
                    ),
                ),
                (
                    "adjusted_close",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Adjusted closing price (accounting for splits, dividends, etc.)",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="yahoo",
                        help_text="Data source (e.g., 'yahoo', 'polygon', 'alpha_vantage')",
                        max_length=50,
                    ),
                ),
                (
                    "timeframe",
                    models.CharField(
                        default="1d",
                        help_text="Time period (e.g., '1m', '5m', '1h', '1d')",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="RegimeTransition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transition_date",
                    models.DateTimeField(help_text="Date of the regime transition"),
                ),
                (
                    "transition_score",
                    models.FloatField(
                        help_text="Score indicating the clarity/confidence of transition"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this transition"
                    ),
                ),
            ],
            options={
                "ordering": ["-transition_date"],
            },
        ),
        migrations.CreateModel(
            name="Signal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Timestamp when the signal was generated",
                    ),
                ),
                (
                    "signal_type",
                    models.CharField(
                        choices=[
                            ("ENTRY_LONG", "Entry Long"),
                            ("ENTRY_SHORT", "Entry Short"),
                            ("EXIT_LONG", "Exit Long"),
                            ("EXIT_SHORT", "Exit Short"),
                            ("STOP_LONG", "Stop Loss Long"),
                            ("STOP_SHORT", "Stop Loss Short"),
                        ],
                        help_text="Type of trading signal",
                        max_length=15,
                    ),
                ),
                (
                    "z_score",
                    models.FloatField(help_text="Z-score that triggered the signal"),
                ),
                (
                    "spread_value",
                    models.FloatField(help_text="Spread value at signal generation"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Confidence score for the signal (higher is more confident)",
                        null=True,
                    ),
                ),
                (
                    "processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this signal has been processed by trading systems",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the signal"
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Parameter values used to generate this signal",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Symbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ticker",
                    models.CharField(
                        help_text="Trading symbol (e.g., 'AAPL')",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full name of the security", max_length=255
                    ),
                ),
                (
                    "sector",
                    models.CharField(
                        blank=True,
                        help_text="Industry sector",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        blank=True,
                        help_text="Exchange where the security is traded",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "asset_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of asset (e.g., 'EQUITY', 'ETF', 'CRYPTO')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the symbol is currently active for trading",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Symbol",
                "verbose_name_plural": "Symbols",
            },
        ),
        migrations.CreateModel(
            name="TradingPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cointegration_pvalue",
                    models.FloatField(help_text="P-value from cointegration test"),
                ),
                (
                    "half_life",
                    models.FloatField(help_text="Half-life of mean reversion in days"),
                ),
                (
                    "correlation",
                    models.FloatField(
                        help_text="Pearson correlation coefficient between the securities"
                    ),
                ),
                (
                    "hedge_ratio",
                    models.FloatField(help_text="Hedge ratio for creating the spread"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this pair is currently active for trading",
                    ),
                ),
                (
                    "lookback_days",
                    models.IntegerField(
                        default=252, help_text="Trading days used in calculation"
                    ),
                ),
                (
                    "stability_score",
                    models.FloatField(
                        blank=True,
                        help_text="Stability score of the cointegration relationship (higher is more stable)",
                        null=True,
                    ),
                ),
                (
                    "last_spread_value",
                    models.FloatField(
                        blank=True, help_text="Most recent spread value", null=True
                    ),
                ),
                (
                    "last_zscore",
                    models.FloatField(
                        blank=True,
                        help_text="Most recent Z-score of the spread",
                        null=True,
                    ),
                ),
                (
                    "last_updated_spread",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the spread was last updated",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trading Pair",
                "verbose_name_plural": "Trading Pairs",
            },
        ),
        migrations.CreateModel(
            name="WalkForwardTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this walk-forward test", max_length=255
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Start date for test period"),
                ),
                (
                    "end_date",
                    models.DateTimeField(help_text="End date for test period"),
                ),
                (
                    "in_sample_size",
                    models.IntegerField(help_text="Size of in-sample window in days"),
                ),
                (
                    "out_of_sample_size",
                    models.IntegerField(
                        help_text="Size of out-of-sample window in days"
                    ),
                ),
                (
                    "parameter_ranges",
                    models.JSONField(help_text="Parameter ranges for optimization"),
                ),
                (
                    "optimization_metric",
                    models.CharField(
                        default="sharpe_ratio",
                        help_text="Metric to optimize (e.g., 'sharpe_ratio', 'total_return')",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        help_text="Current status of this test",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the test completed", null=True
                    ),
                ),
                (
                    "results_summary",
                    models.JSONField(
                        blank=True, help_text="Summary of test results", null=True
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WalkForwardWindow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "in_sample_start",
                    models.DateTimeField(help_text="Start date of in-sample period"),
                ),
                (
                    "in_sample_end",
                    models.DateTimeField(help_text="End date of in-sample period"),
                ),
                (
                    "out_of_sample_start",
                    models.DateTimeField(
                        help_text="Start date of out-of-sample period"
                    ),
                ),
                (
                    "out_of_sample_end",
                    models.DateTimeField(help_text="End date of out-of-sample period"),
                ),
                (
                    "optimized_parameters",
                    models.JSONField(
                        blank=True,
                        help_text="Optimized parameters from in-sample period",
                        null=True,
                    ),
                ),
                (
                    "is_metrics",
                    models.JSONField(
                        blank=True,
                        help_text="Performance metrics for in-sample period",
                        null=True,
                    ),
                ),
                (
                    "oos_metrics",
                    models.JSONField(
                        blank=True,
                        help_text="Performance metrics for out-of-sample period",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["out_of_sample_start"],
            },
        ),
    ]
